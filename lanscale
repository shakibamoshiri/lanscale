#!/bin/bash


################################################################################
#
# bash strict mode
#
################################################################################
private::strict_mode(){
    set -T # inherit DEBUG and RETURN trap for functions
    set -C # prevent file overwrite by > &> <>
    set -E # inherit -e
    set -e # exit immediately on errors
    set -u # exit on not assigned variables
    set -o pipefail # exit on pipe failure
}
private::strict_mode;

#four functions to change output in color
private::info() { printf "\033[1;34m${*}\033[0m\n"; }
private::warn() { printf "\033[1;33m${*}\033[0m\n" 1>&2; }
private::error(){ printf "\033[1;31m${*}\033[0m\n" 1>&2; }
private::title(){ printf "\033[1;37m${*}\033[0m\n"; }

# mutable variables
declare SCRIPT_DEBUG_FLAG=false;

# immutable variables
declare -ir ERR_EXPR_FAILED=1;
declare -ir ERR_FILE_NOT_FOUND=2;
declare -ir ERR_OPTION_NOT_FOUND=3;
declare -ir EXIT_SUCCESS=0;
declare -ir CLI_PPID=$$;

# declare -rA SUBCMD=([help]=help [config]=config [Test]=Test [EnumUser]=EnumUser);
declare -r PS4='debug($LINENO) ${FUNCNAME[0]:+${FUNCNAME[0]}}(): ';
declare -r CLI_NAME='lanscale';
declare -r CLI_VERSION='0.0.1';
declare -r CLI_INSTALL_PATH='/usr/local/bin';
declare -r HELP_OFFSET=20;
declare -r ANSISHELL_HEADER='
 xxx
 xxx
 xxx
LAN Scale using SoftEther VPN';


declare -r __config_path='.';
declare -r __config_file="${__config_path}/sample.yaml"
declare -r __yaml="$(yq '.' < $__config_file)";

declare -A __server;
__server[host]=$(yq ".server.host" $__config_file);
__server[port]=$(yq ".server.port" $__config_file);
__server[pass]=$(yq ".server.pass" $__config_file);
__server[vpncmd]=$(yq ".server.vpncmd" $__config_file);

declare -r vpncmd="${__server[vpncmd]} ${__server[host]}:${__server[port]} /server /password:${__server[pass]} "



public::init(){
    declare -A __peers __data __local_hub __p_cc_name;

    __p_cc_name=${1:? ... Error: __p_cc_name ?}

    if [[ -p /dev/stdin ]]; then
        __data=$(< /dev/stdin);
    else
        exit $ERR_EXPR_FAILED;
    fi

    while read -a objects; do
        __peers[${objects[0]%:}]=${objects[1]};
    done < <(yq ".cascades[] | select(.name==\"$__p_cc_name\")" <<< $__data);

    __local_hub=$(yq '.name' <<< $__data);

    # HubCreate [name] [/PASSWORD:password]
    { $vpncmd /cmd HubCreate $__local_hub /password:${__server[pass]} |& grep -A 3 ^HubCreate; } || true;

    # BridgeCreate [hubname] [/DEVICE:device_name] [/TAP:yes|no]
    $vpncmd /cmd BridgeCreate $__local_hub /tap:yes /device:${__peers[name]}_${__peers[hub]} |& grep -A 3 ^BridgeCreate;

    # CascadeCreate [name] [/SERVER:hostname:port] [/HUB:hubname] [/USERNAME:username]
    $vpncmd /hub:$__local_hub /cmd CascadeCreate ${__peers[name]} /server:${__peers[host]}:${__peers[port]}  /hub:${__peers[hub]} /username:${__peers[user]} |& grep -A 3 ^CascadeCreate;

    # CascadePasswordSet [name] [/PASSWORD:password] [/TYPE:standard|radius]
    $vpncmd /hub:$__local_hub /cmd CascadePasswordSet ${__peers[name]} /password:${__peers[pass]} /type:standard  |& grep -A 3 ^CascadePasswordSet;
}

public::deinit(){
    declare -A __peers __data __local_hub __p_cc_name;

    __p_cc_name=${1:? ... Error: __p_cc_name ?}

    if [[ -p /dev/stdin ]]; then
        __data=$(< /dev/stdin);
    else
        exit $ERR_EXPR_FAILED;
    fi

    while read -a objects; do
        __peers[${objects[0]%:}]=${objects[1]};
    done < <(yq ".cascades[] | select(.name==\"$__p_cc_name\")" <<< $__data);

    __local_hub=$(yq '.name' <<< $__data);

    # CascadeOffline [name]
    $vpncmd /hub:$__local_hub /cmd CascadeOffline ${__peers[name]} |& grep -A 3 ^CascadeOffline;

    # CascadeDelete [name]
    $vpncmd /hub:$__local_hub /cmd CascadeDelete ${__peers[name]} |& grep -A 3 ^CascadeDelete;

    # BridgeDelete [hubname] [/DEVICE:device_name]
    $vpncmd /cmd  BridgeDelete $__local_hub /device:${__peers[name]}_${__peers[hub]} |& grep -A 3 ^BridgeDelete;

    # HubDelete [name]
    { $vpncmd /cmd HubDel $__local_hub |& grep -A 3 ^HubDel; } || true;
}



public::get(){
    declare -A __peers __data;

    if [[ -p /dev/stdin ]]; then
        __data=$(< /dev/stdin);
    else
        exit $ERR_EXPR_FAILED;
    fi

    while read -a objects; do
        __peers[${objects[0]%:}]=${objects[1]};
    done < <(yq '.' <<< $__data)

    # CascadeOnline [name]
    $vpncmd /hub:${__peers[hub]} /cmd CascadeGet ${__peers[name]} |& grep ^CascadeGet -A 100;
}

public::list(){
    declare -A __peers __data;

    if [[ -p /dev/stdin ]]; then
        __data=$(< /dev/stdin);
    else
        exit $ERR_EXPR_FAILED;
    fi

    while read -a objects; do
        __peers[${objects[0]%:}]=${objects[1]};
    done < <(yq '.' <<< $__data)

    # CascadeOnline [name]
    $vpncmd /hub:${__peers[hub]} /cmd CascadeList |& grep ^CascadeList -A 1000;
}

public::peers(){
    if [[ -z ${1:-} ]]; then
        yq '.peers[].name' <<< "$__yaml"
        exit $EXIT_SUCCESS;
    fi

    declare __local_hub="${1:? ... Error: peers hub name?}";
    shift 1;

    if [[ -z ${1:-} ]]; then
        yq ".peers[] | select(.name==\"$__local_hub\") | .cascades[].name" <<< "$__yaml"
        exit $EXIT_SUCCESS;
    fi

    declare __p_cc_name="${1:? ... Error: peers hub cc name?}";
    shift 1;

    if [[ -z ${1:-} ]]; then
        for cmd in print init deinit online offline up donw get list; do
            printf '%s\n' $cmd;
        done
        exit $EXIT_SUCCESS;
    fi
    
    declare __p_action="${1:? ... Error: peers hub cc action??}";

    shift 1;
    if [[ $__p_action == 'print' ]]; then
        yq ".peers[] | select(.name==\"$__local_hub\") | .cascades[] | select(.name==\"$__p_cc_name\")" <<< "$__yaml";
        # yq ".peers[] | select(.name==\"$__local_hub\") " <<< "$__yaml";
    else
        cd ${__server[vpncmd]%vpncmd};
        # yq ".peers[] | select(.name==\"$__local_hub\") | .cascades[] | select(.name==\"$__p_cc_name\")" <<< "$__yaml" | public::${__p_action};
        yq ".peers[] | select(.name==\"$__local_hub\")" <<< "$__yaml" | public::${__p_action} $__p_cc_name;
    fi
    # $vpncmd /hub:$__local_hub /cmd help;

}










private::debug(){
    if [[ $SCRIPT_DEBUG_FLAG == true ]]; then
        private::warn "script($1)"  "${@:2}";
    fi
}

private::debug_x(){
    set -x;
}

private::main_help(){
    printf "$ANSISHELL_HEADER";

    printf "\n\nusage:\n";
    printf "$CLI_NAME [--options]\n";
    printf "$CLI_NAME command [--options]\n";
    printf "$CLI_NAME [--options] command [--options]\n";

    printf "\noptions:\n";
    printf "%-${HELP_OFFSET}s %s\n" '-h  | --help' 'show this help menu';
    printf "%-${HELP_OFFSET}s %s\n" '-v  | --version' 'show version';
    printf "%-${HELP_OFFSET}s %s\n" '-i  | --install' 'install this CLI';
    printf "%-${HELP_OFFSET}s %s\n" '-e  | --example' 'show some examples';
    printf "%-${HELP_OFFSET}s %s\n" '-d  | --debug' 'enable debugging (script level)';
    printf "%-${HELP_OFFSET}s %s\n" '-D  | --debug-x' 'enable bash debugging (bash level)';

    printf "\ncommands:\n";
    printf "%-${HELP_OFFSET}s %s\n" 'help' 'show help menu';
    printf "%-${HELP_OFFSET}s %s\n" 'peers' 'a user functions';
    printf "%-${HELP_OFFSET}s %s\n" 'init' 'a session functions';
    printf "%-${HELP_OFFSET}s %s\n" 'deinit' 'read SE server admin yaml file';
    printf "%-${HELP_OFFSET}s %s\n" 'online' 'send RPC-JSON to SE server';
    printf "%-${HELP_OFFSET}s %s\n" 'offline' 'parse SE server response';
    printf "%-${HELP_OFFSET}s %s\n" 'up' 'reset Bytes and Counts';
    printf "%-${HELP_OFFSET}s %s\n" 'down' 'reset Bytes and Counts';

    exit ${1:-1};
}

private::main(){
    if (( ${#} == 0 )); then
        private::main_help 0;
    fi

    case ${1} in
        help | peers )
            private::debug $LINENO 'command:' "'${1}'";
            private::debug $LINENO 'command-options:' "'${@:2}'";
            public::${1} "${@:2}";
        ;;
        * )
            private::parse_options "$@";
        ;;
    esac
}

private::main "$@";
